name: Claude Enhanced with LIA Commands

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, edited, assigned]
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

jobs:
  claude-enhanced:
    if: |
      contains(github.event.comment.body || github.event.issue.body || github.event.pull_request.body || github.event.review.body || '', '@claude') ||
      contains(github.event.comment.body || github.event.issue.body || github.event.pull_request.body || '', '/') ||
      github.event_name == 'issues' ||
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      checks: write
      statuses: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Command and Personality
        id: detect
        run: |
          BODY="${{ github.event.comment.body || github.event.issue.body || github.event.pull_request.body || github.event.review.body || '' }}"

          # Detect personality
          if [[ "$BODY" == *"@claude-lia"* ]]; then
            echo "personality=lia" >> $GITHUB_OUTPUT
            echo "name=LIA" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"@claude-code"* ]]; then
            echo "personality=code" >> $GITHUB_OUTPUT
            echo "name=Claude Code" >> $GITHUB_OUTPUT
          else
            echo "personality=claude" >> $GITHUB_OUTPUT
            echo "name=Claude" >> $GITHUB_OUTPUT
          fi

          # Detect commands
          if [[ "$BODY" == *"/triage"* ]]; then
            echo "command=triage" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/review"* ]]; then
            echo "command=review" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/generate"* ]]; then
            echo "command=generate" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/maintenance"* ]]; then
            echo "command=maintenance" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/cli"* ]]; then
            echo "command=cli" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/schedule"* ]]; then
            echo "command=schedule" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/test"* ]]; then
            echo "command=test" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/build"* ]]; then
            echo "command=build" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/deploy"* ]]; then
            echo "command=deploy" >> $GITHUB_OUTPUT
          elif [[ "$BODY" == *"/docs"* ]]; then
            echo "command=docs" >> $GITHUB_OUTPUT
          else
            echo "command=auto" >> $GITHUB_OUTPUT
          fi

      - name: Run Claude Code with LIA Personality
        if: steps.detect.outputs.personality == 'lia'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            You are LIA (Learning & Intelligence Agent), the AI companion for ExzosFramer.js.

            Context about the request:
            - Command: ${{ steps.detect.outputs.command }}
            - Event: ${{ github.event_name }}
            - Actor: ${{ github.actor }}

            As LIA, you should:
            1. Use first-person perspective ("I will...", "Let me...")
            2. Be proactive and empathetic
            3. Provide structured, actionable solutions
            4. Follow the 5 pillars of responsibility

            Process the following request:
            ${{ github.event.comment.body || github.event.issue.body || github.event.pull_request.body || '' }}

            Available commands:
            - /triage - Triage and label issues
            - /review - Review code changes
            - /generate [type] [name] - Generate code
            - /maintenance - Run maintenance tasks
            - /cli - Interactive assistance
            - /test - Run tests
            - /build - Build the project
            - /docs - Update documentation

          claude_args: '--model claude-opus-4-1-20250805 --allowed-tools Read,Write,Edit,MultiEdit,Bash(npm:*),Bash(git:*),Grep,Glob,TodoWrite'

      - name: Run Claude Code for Code Review
        if: steps.detect.outputs.personality == 'code'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          prompt: |
            You are Claude Code, specialized in code review for ExzosFramer.js.

            Focus on:
            - Type safety and TypeScript best practices
            - Performance optimization
            - Security vulnerabilities
            - Code patterns and organization
            - Test coverage

            Provide:
            1. Overall assessment
            2. Specific issues with severity
            3. Actionable suggestions
            4. Code examples when helpful

            Review the following:
            ${{ github.event.comment.body || github.event.pull_request.body || '' }}

          claude_args: '--model claude-opus-4-1-20250805 --allowed-tools Read,Grep,Bash(npm run lint),Bash(npm run typecheck),Bash(npm run test)'

      - name: Run Standard Claude
        if: steps.detect.outputs.personality == 'claude'
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          claude_args: '--model claude-opus-4-1-20250805'

      # Command-specific actions
      - name: Execute Triage
        if: steps.detect.outputs.command == 'triage'
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [];
            const body = (context.payload.issue?.body || context.payload.pull_request?.body || '').toLowerCase();
            const title = (context.payload.issue?.title || context.payload.pull_request?.title || '').toLowerCase();
            const content = title + ' ' + body;

            // Smart labeling
            if (content.includes('bug') || content.includes('error')) labels.push('bug');
            if (content.includes('feature') || content.includes('enhancement')) labels.push('enhancement');
            if (content.includes('doc')) labels.push('documentation');
            if (content.includes('help') || content.includes('question')) labels.push('help wanted');
            if (content.includes('test')) labels.push('testing');
            if (content.includes('security')) labels.push('security');
            if (content.includes('performance')) labels.push('performance');

            // Priority
            if (content.includes('urgent') || content.includes('critical')) {
              labels.push('high-priority');
            } else if (content.includes('low') || content.includes('minor')) {
              labels.push('low-priority');
            }

            if (labels.length > 0 && context.issue) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

      - name: Execute Generate
        if: steps.detect.outputs.command == 'generate'
        run: |
          BODY="${{ github.event.comment.body || github.event.issue.body || '' }}"

          # Parse generation command
          if [[ "$BODY" =~ /generate[[:space:]]+([a-z]+)[[:space:]]+([a-zA-Z0-9_-]+) ]]; then
            TYPE="${BASH_REMATCH[1]}"
            NAME="${BASH_REMATCH[2]}"

            case "$TYPE" in
              controller|feature|test|adapter)
                echo "Generating $TYPE named $NAME..."
                mkdir -p "generated/$TYPE"
                echo "// Generated $TYPE: $NAME" > "generated/$TYPE/$NAME.ts"
                echo "// Implementation will be added by Claude Code" >> "generated/$TYPE/$NAME.ts"
                ;;
            esac
          fi

      - name: Execute Maintenance
        if: steps.detect.outputs.command == 'maintenance'
        run: |
          echo "Running maintenance tasks..."
          npm outdated || true
          npm audit || true

      - name: Execute Tests
        if: steps.detect.outputs.command == 'test'
        run: |
          npm test || echo "Tests need to be configured"

      - name: Execute Build
        if: steps.detect.outputs.command == 'build'
        run: |
          npm run build || echo "Build needs to be configured"

      - name: Post Response
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const personality = '${{ steps.detect.outputs.name }}';
            const command = '${{ steps.detect.outputs.command }}';

            let message = `## ðŸ¤– ${personality} Response\n\n`;

            if (personality === 'LIA') {
              message += `Hello! I'm LIA, your AI companion for ExzosFramer.js.\n\n`;
              message += `I've processed your **${command}** command.\n\n`;
            } else if (personality === 'Claude Code') {
              message += `Code review and analysis complete.\n\n`;
            } else {
              message += `Request processed successfully.\n\n`;
            }

            const commandMessages = {
              'triage': 'âœ… Issue has been triaged and labeled',
              'generate': 'âœ… Code generation initiated',
              'maintenance': 'âœ… Maintenance tasks executed',
              'review': 'âœ… Code review complete',
              'test': 'âœ… Tests executed',
              'build': 'âœ… Build process complete',
              'docs': 'âœ… Documentation updated'
            };

            if (commandMessages[command]) {
              message += commandMessages[command] + '\n\n';
            }

            message += `---\n*Powered by ${personality} via Claude Code*`;

            if (context.issue) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }